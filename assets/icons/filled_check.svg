<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" d="m423.992188 7.5h-335.984376c-44.464843 0-80.507812 36.042969-80.507812 80.507812v335.984376c0 44.460937 36.042969 80.507812 80.507812 80.507812h335.984376c44.464843 0 80.507812-36.042969 80.507812-80.507812v-335.984376c0-44.464843-36.042969-80.507812-80.507812-80.507812zm0 0" fill="#e53b3b" data-original="#b2e59c" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m285.613281 7.5h-197.605469c-44.460937 0-80.507812 36.042969-80.507812 80.507812v335.984376c0 44.460937 36.046875 80.507812 80.507812 80.507812h103.667969c-81.597656-97.851562-50.875-278.679688 10.753907-349.222656 59.511718-68.113282 77.679687-122.640625 83.183593-147.777344zm0 0" fill="#c23535" data-original="#9ad880" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m234.132812 378.574219c-10.207031 0-20.054687-3.902344-27.496093-10.949219l-104.738281-99.148438c-16.042969-15.1875-16.734376-40.503906-1.546876-56.546874 15.1875-16.039063 40.5-16.738282 56.546876-1.550782l74.929687 70.933594 121.027344-134.628906c14.769531-16.429688 40.058593-17.773438 56.488281-3.007813 16.429688 14.769531 17.773438 40.058594 3.003906 56.488281l-148.464844 165.152344c-7.214843 8.023438-17.359374 12.792969-28.140624 13.226563-.535157.023437-1.074219.03125-1.609376.03125zm0 0" fill="#ffffff" data-original="#ffffff" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m156.898438 210.382812c-16.046876-15.191406-41.363282-14.492187-56.550782 1.546876-15.1875 16.046874-14.492187 41.359374 1.550782 56.550781l42.46875 40.199219c3.464843-31.980469 11.027343-62.828126 21.515624-89.789063zm0 0" fill="#ccf8ff" data-original="#ccf8ff" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m504.5 379.007812c4.144531 0 7.5-3.355468 7.5-7.5v-283.5c0-48.527343-39.480469-88.007812-88.007812-88.007812h-335.984376c-48.527343 0-88.007812 39.480469-88.007812 88.007812v335.984376c0 48.527343 39.480469 88.007812 88.007812 88.007812h335.984376c48.527343 0 88.007812-39.480469 88.007812-88.007812v-20.511719c0-4.144531-3.355469-7.5-7.5-7.5s-7.5 3.355469-7.5 7.5v20.511719c0 40.257812-32.75 73.007812-73.007812 73.007812h-335.984376c-40.257812 0-73.007812-32.75-73.007812-73.007812v-335.984376c0-40.257812 32.75-73.007812 73.007812-73.007812h335.984376c40.257812 0 73.007812 32.75 73.007812 73.007812v283.5c0 4.144532 3.355469 7.5 7.5 7.5zm0 0" fill="#000000" data-original="#000000" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m151.742188 215.828125 21.09375 19.96875c3.007812 2.851563 7.757812 2.71875 10.605468-.289063 2.847656-3.007812 2.714844-7.753906-.292968-10.601562l-21.09375-19.972656c-19.023438-18.003906-49.144532-17.175782-67.152344 1.84375-18.003906 19.019531-17.179688 49.144531 1.839844 67.148437l104.738281 99.144531c8.859375 8.386719 20.195312 12.96875 34.566406 12.96875 12.730469 0 24.898437-6.238281 33.410156-15.707031l148.46875-165.152343c17.511719-19.480469 15.910157-49.570313-3.566406-67.082032-19.480469-17.507812-49.574219-15.90625-67.082031 3.570313l-115.882813 128.90625-24.636719-23.320313c-3.011718-2.851562-7.757812-2.71875-10.605468.289063-2.847656 3.007812-2.714844 7.753906.292968 10.601562l30.226563 28.613281c2.871094 2.542969 7.351563 3.078126 10.730469-.433593l121.027344-134.628907c11.980468-13.324218 32.570312-14.421874 45.898437-2.441406 13.328125 11.980469 14.421875 32.570313 2.441406 45.898438l-148.464843 165.152344c-5.824219 6.476562-14.15625 10.394531-22.859376 10.746093-8.800781.351563-17.273437-2.832031-23.652343-8.871093l-104.734375-99.148438c-13.015625-12.320312-13.578125-32.929688-1.261719-45.945312 12.320313-13.011719 32.929687-13.578126 45.945313-1.257813zm0 0" fill="#000000" data-original="#000000" class=""/></g></svg>
