<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 395.94667 395" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" d="m368.640625 154.074219c0 84.828125-68.769531 153.597656-153.601563 153.597656-84.828124 0-153.597656-68.769531-153.597656-153.597656 0-84.832031 68.769532-153.601563 153.597656-153.601563 84.832032 0 153.601563 68.769532 153.601563 153.601563zm0 0" fill="#505050" data-original="#ffe8dc" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m269.652344 375.941406c-13.195313 0-23.890625-10.699218-23.890625-23.894531v-293.546875c0-13.195312 10.695312-23.894531 23.890625-23.894531 13.195312 0 23.894531 10.699219 23.894531 23.894531v293.546875c0 13.195313-10.699219 23.894531-23.894531 23.894531zm0 0" fill="#ffffff" data-original="#ffffff" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m269.652344 382.765625c-16.9375 0-30.71875-13.777344-30.71875-30.71875v-293.546875c0-16.941406 13.78125-30.71875 30.71875-30.71875 16.941406 0 30.722656 13.777344 30.722656 30.71875v293.546875c0 16.941406-13.78125 30.71875-30.722656 30.71875zm0-341.332031c-9.414063 0-17.066406 7.65625-17.066406 17.066406v293.546875c0 9.410156 7.652343 17.066406 17.066406 17.066406 9.414062 0 17.066406-7.65625 17.066406-17.066406v-293.546875c0-9.410156-7.652344-17.066406-17.066406-17.066406zm0 0" fill="#4c241d" data-original="#4c241d" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m365.226562 375.941406c-13.195312 0-23.894531-10.699218-23.894531-23.894531v-293.546875c0-13.195312 10.699219-23.894531 23.894531-23.894531 13.195313 0 23.894532 10.699219 23.894532 23.894531v293.546875c0 13.195313-10.699219 23.894531-23.894532 23.894531zm0 0" fill="#d62c2c" data-original="#fc8c29" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m365.226562 382.765625c-16.941406 0-30.71875-13.777344-30.71875-30.71875v-293.546875c0-16.941406 13.777344-30.71875 30.71875-30.71875 16.941407 0 30.71875 13.777344 30.71875 30.71875v293.546875c0 16.941406-13.777343 30.71875-30.71875 30.71875zm0-341.332031c-9.414062 0-17.066406 7.65625-17.066406 17.066406v293.546875c0 9.410156 7.652344 17.066406 17.066406 17.066406 9.414063 0 17.066407-7.65625 17.066407-17.066406v-293.546875c0-9.410156-7.652344-17.066406-17.066407-17.066406zm0 0" fill="#4c241d" data-original="#4c241d" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m24.683594 92.214844 183.75 106.671875c7.894531 4.582031 7.894531 15.980469 0 20.5625l-183.75 106.667969c-7.925782 4.601562-17.855469-1.117188-17.855469-10.277344v-213.34375c0-9.164063 9.929687-14.882813 17.855469-10.28125zm0 0" fill="#c22525" data-original="#ffce56" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m18.71875 334.585938c-3.207031 0-6.417969-.84375-9.347656-2.527344-5.867188-3.382813-9.371094-9.445313-9.371094-16.21875v-213.34375c0-6.773438 3.507812-12.835938 9.378906-16.21875 5.867188-3.382813 12.867188-3.371094 18.734375.03125l183.746094 106.675781c5.835937 3.382813 9.320313 9.433594 9.320313 16.179687 0 6.75-3.480469 12.796876-9.320313 16.1875l-183.746094 106.671876c-2.941406 1.707031-6.167969 2.5625-9.394531 2.5625zm.027344-237.167969c-1.167969 0-2.09375.425781-2.554688.691406-.765625.441406-2.539062 1.746094-2.539062 4.386719v213.339844c0 2.644531 1.773437 3.949218 2.535156 4.386718.765625.441406 2.773438 1.316406 5.074219-.007812l183.746093-106.667969c2.273438-1.324219 2.519532-3.503906 2.519532-4.378906 0-.878907-.246094-3.058594-2.519532-4.378907l-183.746093-106.671874c-.902344-.519532-1.761719-.699219-2.515625-.699219zm0 0" fill="#4c241d" data-original="#4c241d" class=""/></g></svg>
